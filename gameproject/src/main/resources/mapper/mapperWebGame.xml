<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.mysql.mapperWebGame">
    
    <!-- ========================== Insert Mappers ============================== -->
    
    <!-- Members Insert --><!--CHECK-->
    <insert id="insertMembers" parameterType="ModelMembers">        
        Insert into Members
        	('UserID', 'UserPW', 'UserNicName', 'UserEmail')
        		values (#{UserID}, #{UserPW}, #{UserNicName}, #{UserEmail})
    </insert>
    
    <!-- Castle Insert --><!--CHECK-->
    <insert id="insertCastle" parameterType="ModelCastle">        
        Insert into Castle
        	('UserID', 'Name', 'Kind', 'LocationID','Production')
        		values (#{UserID}, #{Name}, #{Kind}, #{LocationID},#(Production))
    </insert>
    
    <!-- xyval Insert --><!--CHECK-->
    <insert id="insertXYval" parameterType="ModelXYval">        
        Insert into xyval
        	('LocationID', 'CastleX', 'CastleY', 'Kind')
        		values (#{LocationID}, #{CastleX}, #{CastleY}, #{Kind})
    </insert>
    
    <!-- OutResource Insert --><!--CHECK-->
    <insert id="insertOutResource" parameterType="ModelOutResource">        
        Insert into OutResource
        	('LocationID', 'UserID', 'Production', 'Kind')
        		values (#{LocationID}, #{UserID}, #{Production}, #{Kind})
    </insert>
    
    <!-- Building Insert --><!--CHECK-->
    <insert id="insertBuilding" parameterType="ModelBuilding">        
        Insert into Building
        	('LocationID', 'Kind', 'Level', 'RoomNumber')
        		values (#{LocationID}, #{Kind}, #{Level}, #{RoomNumber})
    </insert>
    
    <!-- 성의 건설중인 건물리스트  목록 추가 --><!--CHECK-->
    <insert id="insertWaitBuildingList" parameterType="ModelWaitList_Building">      
 			Insert into 
 				WaitList_Building
 					('WaitTime','LocationID','Kind','RoomNumber')
 						values (#(WaitTime),#(LocationID),#(Kind),#(RoomNumber))
    </insert>
    
    <!-- 성의 건설중인 유닛리스트  목록 추가 --><!--CHECK-->
    <insert id="insertWaitUnitgList" parameterType="ModelWaitList_Unit">      
 			Insert into 
 				WaitList_Unit
 					('WaitTime','LocationID','UnitID','Amount')
 						values (#(WaitTime),#(LocationID),#(UnitID),#(Amount))
    </insert>
    
    <!-- Castletroop Insert --><!--CHECK-->
    <insert id="insertCastletroop" parameterType="ModelCastletroop">        
        insert into Castletroop
        	('LocationID', 'SlotID')
        		values (#{LocationID}, #{SlotID})
    </insert>
    
    <!-- Herotable Insert --><!--CHECK-->
    <insert id="insertHerotable" parameterType="ModelHeroTable">        
        Insert into Herotable
        	('HeroID', 'STR', 'AGI', 'CON', 'Owner', 'LocationID','Statuus', 'Specialty', 'Potrait', 'Sex')
        		values (#{HeroID}, #{STR}, #{AGI}, #{CON}, #{Owner}, #{LocationID}, #{Statuus}, #{Specialty}, #{Potrait}, #{Sex} )
    </insert>
    
    <!-- Herotroop Insert --><!--CHECK-->
    <insert id="insertHerotroop" parameterType="ModelHerotroop">        
        Insert into Herotroop
        	('HeroID', 'SlotID')
        		values (#{HeroID}, #{SlotID})
    </insert>
    
    <!-- Slot Insert --><!--CHECK-->
    <insert id="insertSlot" parameterType="ModelSlot">        
        Insert into Slot
        	('SlotID', 'SoltUID', 'SoltAmount')
        		values (#{SlotID}, #{SoltUID}, #{SoltAmount})
    </insert>
    
    <!-- Log Insert --><!--CHECK-->
    <insert id="insertLog" parameterType="ModelLog">        
        Insert into Log
        	('AttackUserID', 'DefenseUserID', 'AttackUserUseYN','DefenseUserUseYN','WhoWins','BattleDate')
        		values (#{AttackUserID}, #{DefenseUserID}, #{AttackUserUseYN},#{DefenseUserUseYN},#{WhoWins},#{BattleDate})
    </insert>
    
    <!-- Multi Insert WaitList_Building --><!--CHECK-->
    <insert id="mInsertWaitList_Building" parameterType="java.util.List">
        INSERT INTO  waitlist_building (   WaitTime  ,   LocationID   ,   Kind	,	RoomNumber  )
        VALUES
            <foreach collection="list" item="item" index="index" open="(" separator="),(" close=")">
                #{item.WaitTime} , #{item.LocationID} , #{item.Kind} , #{RoomNumber}
            </foreach>
    </insert>
    
    <!-- Multi Insert WaitList_Unit --><!--CHECK-->
    <insert id="mInsertWaitList_Unit" parameterType="java.util.List">
        INSERT INTO  waitlist_unit (  WaitTime ,  LocationID  ,  UnitID	, RoomNumber ,	Amount )
        VALUES
            <foreach collection="list" item="item" index="index" open="(" separator="),(" close=")">
                #{item.WaitTime} , #{item.LocationID} , #{item.UnitID} , #{RoomNumber} , #{Amount}
            </foreach>
    </insert>
    
    
    <!-- ========================== Insert Mappers ============================== -->
    
    
    
    
    <!-- ========================== select Mappers ============================== -->
    
    <!-- 아이디와 비밀번호로 정보조회 --> <!--CHECK-->
    <select id="getMembersLogin" parameterType="ModelMembers" resultType="int">        
        SELECT count(*)
         	FROM members
        		 WHERE UserID = #{UserID} and UserPW=#{UserPW}
    </select>
    
    <!-- 아이디로 정보조회 --> <!--CHECK-->
    <select id="getMember" parameterType="ModelMembers"  resultType="ModelMembers">        
        SELECT * FROM members
         WHERE UserID = #{UserID}
    </select>
    
    
    
    <!-- 유저 성 정보 가져오기 --><!--CHECK-->
    <select id="getCastleList" parameterType="ModelMembers"  resultType="ModelCastle">        
        SELECT * FROM
         castle where UserID=#{UserID}
    </select>
    
    <!-- 유저 성 정보 하나 가져오기 --><!--CHECK-->
    <select id="getCastleOne" parameterType="Integer"  resultType="ModelCastle">        
        SELECT * FROM
         castle where LocationID=#{locationID}
    </select>
    
    <!-- 성에 있는 영웅 정보 가져오기 --><!--CHECK-->
    <select id="getHeroList_InCastle" parameterType="ModelCastle"  resultType="ModelHeroTable">        
  		 SELECT * FROM
      		  herotable where LocationID=#{LocationID}
         		 
    </select>
    
    <!-- 성좌표 정보 가져오기 --><!--CHECK-->
    <select id="getXYval_LocationID" parameterType="Integer"  resultType="ModelXYval">        
  		 SELECT * FROM
      		  xyval where LocationID=#{locationID}
         		 
    </select>
    
    <!-- 성좌표 정보 가져오기 ver 2 --><!--CHECK-->
    <select id="getXYval_XY" parameterType="ModelXYval"  resultType="ModelXYval">        
  		 SELECT * FROM
      		  xyval where CastleX=#{CastleX} and CastleY=#{CastleY}
         		 
    </select>
    
    <!-- 모든 좌표 정보 가져오기 --><!--CHECK-->
    <select id="getAllXYval">        
  		 SELECT * FROM
      		  xyval
      		  
    </select>
    
    <!-- 성에병력 슬롯ID 정보 가져오기 --><!--CHECK-->
    <select id="getCastleTroop_SlotList" parameterType="ModelCastle"  resultType="ModelSlot">        
 		select SlotID,SoltUID,SoltAmount from
			castletroop_SlotUnit
				where LocationID=#{LocationID}
 
    </select>
    
    <!-- 성의 건물 정보   가져오기 --><!--CHECK-->
    <select id="getBuilding" parameterType="ModelCastle"  resultType="ModelBuilding">        
 		SELECT * FROM building where LocationID=#{LocationID}
      		  
    </select>
    
    <!-- OutResource  가져오기 --><!--CHECK-->
    <select id="getOutResource" parameterType="Integer"  resultType="ModelOutResource">        
 		SELECT * FROM outresource where LocationID=#{locationID}
      		  
    </select>
    
    <!-- 성자원지+야외자원지   가져오기 --> <!--CHECK-->
    <select id="getAllProduction" parameterType="ModelCastle" resultType="int">      
 			select sum(ap.Production) from

			(select Production from castle  where castle.UserID = #{UserID}

				union

			 select Production from outresource  where outresource.UserID = #{UserID}) as ap
    </select>
    
    <!-- 성의 건설중인 건물리스트   가져오기 --><!--CHECK-->
    <select id="getWaitList_Building" parameterType="ModelCastle" resultType="ModelWaitList_Building">      
 			select * from
 				WaitList_Building
 					where LocationID=#{LocationID}
    </select>
    
    <!-- 성의 건설중인 유닛리스트   가져오기 --><!--CHECK-->
    <select id="getWaitList_Unit" parameterType="ModelCastle" resultType="ModelWaitList_Unit">      
 			select * from
 				WaitList_Unit
 					where LocationID=#{LocationID}
    </select>
    
    <!-- 영웅 정보 가져오기 --> <!--CHECK-->
    <select id="getHero" parameterType="ModelHeroTable"  resultType="ModelHeroTable">        
 		select * from
			Herotable
				where HeroID=#{HeroID}
    </select>
    
    <!-- 영웅의병력 슬롯ID 정보 가져오기 --><!--CHECK-->
    <select id="getHeroTroop_SlotList" parameterType="ModelHeroTable"  resultType="ModelSlot">        
 		select SlotID,SoltUID,SoltAmount from
			herotroop_SlotUnit
				where HeroID=#{HeroID}
    </select>
    
    <!-- 유닛  스탯정보 가져오기 --><!--CHECK-->
    <select id="getUnitInformation" parameterType="int" resultType="ModelUnit">        
 		SELECT * FROM unit
      		  	where UnitID=#{UnitID}
    </select>
    
    <!-- 유닛  건설정보 가져오기 --><!--CHECK-->
    <select id="getUnitBuild"  resultType="ModelUnitBuild">        
 		SELECT * FROM unitbuild
    </select>
    
    <!-- 건물 건설정보  가져오기 --><!--CHECK-->
    <select id="getStructures"  resultType="ModelStructures">        
 		SELECT * FROM structures
      		  
    </select>
    
    
    
    <!-- ========================== select Mappers ============================== -->
    
    
    <!-- ========================== update Mappers ============================== -->
    
    <!-- Member Update Level --><!--CHECK-->
    <update id="updateMembers_Level" parameterType="hashmap">
    	update members 
       		SET 
       			 UserLevel		=	#{updateValue.UserLevel}
       	WHERE 	 UserID			=	#{serchValue.UserID}
    
    </update>
    
    <!-- Member Update EXP --><!--CHECK-->
    <update id="updateMembers_EXP" parameterType="hashmap">
    	update members 
       		SET 
       			 UserEXP	=	#{updateValue.UserEXP}
       	WHERE 	 UserID		=	#{serchValue.UserID}
    
    </update>
    
    <!-- Member Update SaveProduction --><!--CHECK-->
    <update id="updateMembers_SaveProduction" parameterType="hashmap">
    	update members 
       		SET 
       			 SaveProduction	=	#{updateValue.SaveProduction}
       	WHERE 	 UserID			=	#{serchValue.UserID}
    
    </update>
    
    <!-- Member Update UserData --><!--CHECK-->
    <update id="updateMembers_UserData" parameterType="hashmap">
    	update members
  					set UserEmail = case
                 	when #{updateValue.UserEmail} is not null
					and  #{updateValue.UserEmail} !=''  then #{updateValue.UserEmail}
                  	else UserEmail
                	end,
   		UserNicName = case
                  	when #{updateValue.UserNicName} is not null
					and  #{updateValue.UserNicName} !=''  then #{updateValue.UserNicName}
                  	else UserNicName
                 	end,
   		UserPW = case
                 	when #{updateValue.UserPW} is not null
					and  #{updateValue.UserPW} !=''  then #{updateValue.UserPW}
                  	else UserPW
                 	end
		where	UserID=#{serchValue.UserID}
       	
    </update>
    
    
    
    
    <!-- ModelCastle Update --><!--CHECK-->
    <update id="updateCastle" parameterType="hashmap">
    	update
    		castle SET
    			 Name			=	#{updateValue.Name}
    			,SaveProduction	=	#{updateValue.SaveProduction}
    			,Kind			=	#{updateValue.Kind}
       	WHERE	 LocationID		=	#{serchValue.LocationID}
    
    </update>
    
    <!-- Catle Building Update --><!--CHECK-->
    <update id="updateBuilding" parameterType="hashmap">
    	update Building 
       		SET  level		=	#{updateValue.Level}
       			,RoomNumber	=	#{updateValue.RoomNumber}
       	WHERE LocationID	=	#{serchValue.LocationID}
    
    </update>
    

    
    <!-- 영웅 정보 업데이트 --><!--CHECK-->
    <update id="updateHero" parameterType="hashmap">
    	update updateHero 
       		SET	 STR		= #{updateValue.STR}
				,AGI        = #{updateValue.AGI}
				,CON        = #{updateValue.CON}
				,Owner      = #{updateValue.Owner}
				,LacationID = #{updateValue.LacationID}
				,Statuus    = #{updateValue.Statuus}
				,Specialty  = #{updateValue.Specialty}
				,Potrait    = #{updateValue.Potrait}
				,Sex        = #{updateValue.Sex}
       	WHERE HeroID		= #{serchValue.HeroID}
    
    </update>
    
    <!-- 영웅 슬롯 유닛 정보 업데이트 --><!--CHECK-->
    <update id="updateSlot" parameterType="hashmap">
    	update slot 
       		SET  SoltUID		=	#{updateValue.SoltUID}
       			,SoltAmount		=	#{updateValue.SoltAmount}
       	WHERE 	 SoltID			=	#{serchValue.SoltID}
    
    </update>
    
    <!-- 야외자원지 점령유저 정보 업데이트 --><!--CHECK-->
    <update id="updateOutResource" parameterType="hashmap">
    	update outresource 
     		 SET 
     		 	 UserID	 =	#{updateValue.UserID}
     			,Kind	 = 	case when #{updateValue.Kind} is not null
     							  and #{updateValue.Kind}!=0 then #{Kind} 
			                                               		  else Kind 
					  										      end
       	
				WHERE 	 LocationID		=	#{serchValue.LocationID}
    
    </update>
    
    <!-- 건물 건설 리스트 시간 업데이트 --><!--CHECK-->
    <update id="updateWaitList_Building" parameterType="hashmap">
    	update
    	WaitList_Building SET 
     		 		 WaitTime		=	#{updateValue.WaitTime}
			WHERE 	 LocationID		=	#{serchValue.LocationID}
    
    </update>
    
    <!-- 유닛 생산 리스트 시간 업데이트 --><!--CHECK-->
    <update id="updateWaitList_Unit" parameterType="hashmap">
    	update
    	waitlist_unit SET 
     		 		 WaitTime		=	#{updateValue.WaitTime}
			WHERE 	 LocationID		=	#{serchValue.LocationID}
    
    </update>
    
    
    
    
    
    
    <!-- ========================== update Mappers ============================== -->
    
    
    <!-- ========================== Delete Mappers ============================== -->
    
    <!-- DELETE Castle Troops --><!--CHECK-->
    <delete id="deleteCastleTroop" parameterType="Integer">
    	delete from
    		castletroop
    			where LocationID=#{locationID}
    	
    </delete>
    
    <!-- DELETE Hero Troops --><!--CHECK-->
    <delete id="deleteHeroTroop" parameterType="Integer">
    	delete from
    		herotroop
    			where HeroID=#{heroID}
    	
    </delete>
    
    <!-- DELETE Hero Table --><!--CHECK-->
    <delete id="deleteHeroTable" parameterType="Integer">
    	delete from
    		herotable
    			where HeroID=#{heroID}
    	
    </delete>
    
    <!-- DELETE Slots --><!--CHECK-->
    <delete id="deleteSlot" parameterType="Integer">
    	delete from
    		slot
    			where SlotID=#{slotID}
    </delete>
    
    <!-- DELETE Castle Buildings --><!--CHECK-->
    <delete id="deleteCastleBuildings" parameterType="Integer">
    	delete from
    		building
    			where LocationID=#{locationID}
    </delete>
    
    <!-- DELETE Castle OutResources --><!--CHECK-->
    <delete id="deleteOutResource" parameterType="Integer">
    	delete from
    		outresource
    			where LocationID=#{locationID}
    </delete>
    
    <!-- DELETE  X,Y Values --><!--CHECK-->
     <delete id="deleteXYval" parameterType="Integer">
    	delete from
    		xyval
    			where LocationID=#{locationID}
    </delete>
    
    <!-- DELETE  Castle --><!--CHECK-->
    <delete id="deleteCastle" parameterType="Integer">
    	delete from
    		castle
    			where UserID=#{userID}
    </delete>
    
    <!-- DELETE  Member --><!--CHECK-->
    <delete id="deleteMembers" parameterType="ModelMembers">
    	delete from
    		members
    			where UserID=#{UserID} and UserPW=#{UserPW} 
    </delete>
    
    <!-- ========================== Delete Mappers ============================== -->
    
    <!-- ========================== Create&Drop Mappers ============================== -->

    <!-- ========================== Create&Drop Mappers ============================== -->
    
        
 </mapper>
